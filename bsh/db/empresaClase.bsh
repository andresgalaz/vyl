package vyl.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import prg.glz.FrameworkException;
import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertList;
import prg.util.cnv.ConvertMap;
import prg.util.cnv.ConvertNumber;
import prg.util.db.hlp.ConexionHelper;

/*
 * Denominar BSH:
 * vyl/bsh/db/empresaClase.bsh
 * 
 * BSH de llamada para lista de empresas:
 * 
 * call.include('vyl/bsh/util/jsonDataUtilClase.bsh')
 * call.include('vyl/bsh/db/empresaClase.bsh')
 * // Lista todas las empresas
 * new Empresa(request, connectionHelper).lista();
 * // Obtiene la empresa por usando prm_pEmpresa y se puede indicar
 * // prm_alias como prefijo de los campos de salida 
 * new Empresa(request, connectionHelper).get();
 *
 * @author agalaz
 *
 */
public class Empresa {
    private HttpServletRequest request;
    private ConexionHelper     cnxHlp;
    // Solo como alias para acortar la sintaxis
    private JsonDataUtil       u = new JsonDataUtil();

    public Empresa(HttpServletRequest request, ConexionHelper connectionHelper) throws FrameworkException {
        this.request = request;
        this.cnxHlp = connectionHelper;
    }

    public Empresa(ConexionHelper connectionHelper) throws FrameworkException {
        this.cnxHlp = connectionHelper;
    }

    /**
     * Lista todas las empresas. No espera parámetros
     * 
     * @return
     * @throws FrameworkException
     */
    public List lista() throws FrameworkException {
        try {
            PreparedStatement ps = creaPreparedStatement( " WHERE 1 = 1 ", "" );
            ResultSet rs = ps.executeQuery();
            List lis = ConvertList.fromResultSet( rs );
            rs.close();
            ps.close();
            return lis;
        } catch (SQLException e) {
            throw new FrameworkException( "Al listar tEmpresa", e );

        }
    }

    /**
     * Lee la empresa por ID
     * 
     * @return
     * @throws FrameworkException
     */
    public Map get() throws FrameworkException {
        // El parámetro se puede recibir:
        // - Request : prm_alias
        // - Request : prm_pEmpresa
        // - Formdata : VYL_EMPRESA_ID
        String cAlias = u.getString( this.request, "prm_alias" );
        Integer pEmpresa = u.getInt( this.request, "prm_pEmpresa" );
        return getById( pEmpresa, cAlias );
    }

    public Map getById(Integer pEmpresa, String cAlias) throws FrameworkException {
        if (ConvertNumber.isCero( pEmpresa ))
            return null;
        if (cAlias == null)
            cAlias = "";
        else
            cAlias += "_";

        try {
            Map mResp;
            PreparedStatement ps = creaPreparedStatement( " WHERE em.pEmpresa = ? ", cAlias );
            int nIdx = 1;
            ps.setInt( nIdx++, pEmpresa );
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                mResp = ConvertMap.fromResultSet( rs );
            } else {
                mResp = new HashMap();
                mResp.put( "success", true );
                mResp.put( "message", "No existe empresa-vendedor ID:" + pEmpresa );
            }
            rs.close();
            ps.close();
            return mResp;

        } catch (SQLException e) {
            throw new FrameworkException( "Al leer tEmpresa:" + pEmpresa, e );
        }
    }

    private PreparedStatement creaPreparedStatement(String cWhere, String cAlias) throws SQLException {
        String cSql = "SELECT  \n"
                + "       em.pEmpresa          as " + cAlias + "EMPRESA_ID, \n"
                + "       em.cNombre           as " + cAlias + "EMPRESA_NOMBRE, \n"
                + "       em.cRepresentante    as " + cAlias + "EMPRESA_REPRESENTANTE, \n"
                + "       em.cRutEmpresa       as " + cAlias + "EMPRESA_RUT, \n"
                + "       em.cRutRepresentante as " + cAlias + "EMPRESA_RUT_REPRESENTANTE \n"
                + " FROM  tEmpresa em \n "
                + cWhere;
        PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
        return ps;
    }
}
