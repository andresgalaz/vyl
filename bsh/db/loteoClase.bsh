package vyl.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import prg.glz.FrameworkException;
import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertException;
import prg.util.cnv.ConvertList;
import prg.util.cnv.ConvertMap;
import prg.util.cnv.ConvertNumber;
import prg.util.cnv.ConvertString;
import prg.util.db.hlp.ConexionHelper;

/*
 * Denominar BSH:
 * vyl/bsh/db/loteoClase.bsh
 * 
 * BSH de llamada para lista de loteos:
 * 
 * call.include('vyl/bsh/db/loteoClase.bsh')
 * // Opciones
 * // Listado de nombres de Loteo ( LOTEO_ID y LOTEO_NOMBRE )
 * new Loteo(request, connectionHelper, traza).nombres();
 * // Obtener por ID o Nombre : prm_pLoteo y/o prm_cNombre, parámetro
 * // adicional prm_alias que se pega como prefijo a los nombres de los campos
 * // de salida. 
 * new Loteo(request, connectionHelper).get();
 * 
 * @author agalaz
 *
 */
public class Loteo {
    private HttpServletRequest request;
    private ConexionHelper     cnxHlp;
    private List               traza;
    // Solo como alias para acortar la sintaxis
    private JsonDataUtil       u = new JsonDataUtil();

    public Loteo(HttpServletRequest request, ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.request = request;
        this.cnxHlp = connectionHelper;
        this.traza = traza;
    }

    public Loteo(ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.cnxHlp = connectionHelper;
        this.traza = traza;
    }

    /**
     * Actualiza loteos
     * 
     * @return
     * @throws FrameworkException 
     */
    public String insUpd() throws FrameworkException {
        String cJsonData = request.getParameter( "prm_data" );
        if (ConvertString.isEmpty( cJsonData ))
            throw new FrameworkException( "Falta parámetro prm_data" );

        Map mData = ConvertMap.fromJsonString( cJsonData );
        Integer pLoteo = u.getInt( mData, "LOTEO_ID" );
        String cNombre = u.getString( mData, "LOTEO_NOMBRE" );
        String cDescripcion = u.getString( mData, "LOTEO_DESCRIPCION" );
        String cDeslinde = u.getString( mData, "LOTEO_DESLINDE" );
        String cHistoria = u.getString( mData, "LOTEO_HISTORIA" );

        Map mRegAct = null;
        if (ConvertNumber.isCero( pLoteo )) {
            pLoteo = null;
            // Si no hay ID se busca por Nombre
            mRegAct = getByFiltro( null, cNombre, null );
            // Verifica si existe ID
            if (mRegAct.containsKey( "LOTEO_ID" ))
                pLoteo = u.getInt( mRegAct, "LOTEO_ID" );
            else
                mRegAct = null;
        } else {
            mRegAct = getByFiltro( pLoteo, null, null );
            // Si existe registro se recupera ID
            if (!mRegAct.containsKey( "LOTEO_ID" ))
                mRegAct = null;
        }

        String cSql;
        if (mRegAct == null) {
            // Inserta
            cSql = "INSERT INTO tLoteo ( cNombre , cDescripcion, cDeslinde, cHistoria ) \n"
                    + " VALUES ( ?, ?, ?, ?  )";
        } else {
            // Actualiza
            cSql = "UPDATE tLoteo \n"
                    + " SET cNombre  = ?, cDescripcion = ?, cDeslinde = ?, cHistoria = ? \n"
                    + " WHERE pLoteo = ? \n";
        }
        try {
            PreparedStatement psUpd = this.cnxHlp.getConnection().prepareStatement( cSql, Statement.RETURN_GENERATED_KEYS );
            int nIdx = 1;
            cnxHlp.setString( psUpd, nIdx++, cNombre );
            cnxHlp.setString( psUpd, nIdx++, cDescripcion );
            cnxHlp.setString( psUpd, nIdx++, cDeslinde );
            cnxHlp.setString( psUpd, nIdx++, cHistoria );
            if (mRegAct != null)
                psUpd.setInt( nIdx++, pLoteo );
            psUpd.execute();

            if (mRegAct == null) {
                // Obtiene la llave generada en caso de ser un insert
                ResultSet rs = psUpd.getGeneratedKeys();
                if (rs.next())
                    pLoteo = rs.getInt( 1 );
                rs.close();
            }
            psUpd.close();
        } catch (SQLException e) {
            traza.add( "Loteo.insUpd->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al insertar en la tabla tLoteo\n" + ConvertException.stackTrace2string( e ) );
        }
        return pLoteo.toString();
    }

    /**
     * Elimina loteos
     * 
     * @return
     * @throws FrameworkException 
     */
    public String delete() throws FrameworkException {
        Integer pLoteo = u.getInt( request, "prm_pLoteo", 0 );
        if (pLoteo <= 0)
            throw new FrameworkException( "Falta parámetro pLoteo" );

        Map mRegAct = getByFiltro( pLoteo, null, null );

        if (mRegAct == null)
            throw new FrameworkException( "No existe loteo:" + pLoteo );
        String cNombre = u.getString( mRegAct, "LOTEO_NOMBRE" );

        try {

            // Si el loteo existe, se verifica que no existan ventas asociadas        
            String cSql = "SELECT 'x' from tVenta WHERE cLoteo = '" + pLoteo + "' OR cLoteo = '" + cNombre + "'\n";
            Statement st = this.cnxHlp.getConnection().createStatement();
            ResultSet rs = st.executeQuery( cSql );
            boolean bHayVentas = rs.next();
            rs.close();
            st.close();
            if (bHayVentas)
                throw new FrameworkException( "No se puede borrar loteo si hay ventas asociadas" );
        } catch (SQLException e) {
            traza.add( "Loteo.delete->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al buscar ventas asociadas\n" + ConvertException.stackTrace2string( e ) );
        }

        // Elimina
        String cSql = "DELETE FROM tLoteo WHERE pLoteo = ? \n";
        try {
            PreparedStatement psDel = this.cnxHlp.getConnection().prepareStatement( cSql );
            psDel.setInt( 1, pLoteo );
            psDel.execute();
            psDel.close();
        } catch (SQLException e) {
            traza.add( "Loteo.delete->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al eliminar de la tabla tLoteo\n" + ConvertException.stackTrace2string( e ) );
        }
        return "Registro eliminado correctamente";
    }

    /**
     * Lista todas las loteos. No espera parámetros
     * 
     * @return
     * @throws FrameworkException
     */
    public List nombres() throws FrameworkException {
        try {
            String cSql = "SELECT  \n"
                    + "       lo.pLoteo          as LOTEO_ID, \n"
                    + "       lo.cNombre         as LOTEO_NOMBRE, \n"
                    + "       lo.cDescripcion    as LOTEO_DESCRIPCION \n"
                    + " FROM  tLoteo lo \n ";
            PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
            ResultSet rs = ps.executeQuery();
            List lis = ConvertList.fromResultSet( rs );
            rs.close();
            ps.close();
            return lis;
        } catch (SQLException e) {
            traza.add( "Loteo.nombres->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al listar tLoteo", e );

        }
    }

    /**
     * Lee la loteo por ID
     * 
     * @return
     * @throws FrameworkException
     */
    public Map get() throws FrameworkException {
        // El parámetro se puede recibir:
        // - Request : prm_alias
        // - Request : prm_pLoteo
        // - Formdata : VYL_LOTEO_ID
        String cAlias = u.getString( this.request, "prm_alias" );
        Integer pLoteo = u.getInt( this.request, "prm_pLoteo" );
        String cNombre = u.getString( this.request, "prm_cNombre" );
        return getByFiltro( pLoteo, cNombre, cAlias );
    }

    public Map getByFiltro(Integer pLoteo, String cNombre, String cAlias) throws FrameworkException {
        if (cAlias == null)
            cAlias = "";
        else
            cAlias += "_";

        try {
            Map mResp;
            String cSql = "SELECT  \n"
                    + "       lo.pLoteo          as " + cAlias + "LOTEO_ID, \n"
                    + "       lo.cNombre         as " + cAlias + "LOTEO_NOMBRE, \n"
                    + "       lo.cDescripcion    as " + cAlias + "LOTEO_DESCRIPCION, \n"
                    + "       lo.cDeslinde       as " + cAlias + "LOTEO_DESLINDE, \n"
                    + "       lo.cHistoria       as " + cAlias + "LOTEO_HISTORIA \n"
                    + " FROM  tLoteo lo \n "
                    + " WHERE 1 = 1 \n"
                    + (pLoteo != null ? " AND lo.pLoteo  = ? " : "")
                    + (cNombre != null ? " AND lo.cNombre = ? " : "");
            traza.add( cSql );
            PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
            int nIdx = 1;
            if (pLoteo != null) {
                traza.add( "pLoteo:" + pLoteo );
                ps.setInt( nIdx++, pLoteo );
            }
            if (cNombre != null) {
                traza.add( "cNombre:" + cNombre );
                ps.setString( nIdx++, cNombre );
            }
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                mResp = ConvertMap.fromResultSet( rs );
            } else {
                mResp = new HashMap();
                traza.add( "No existe loteo-vendedor ID:" + pLoteo + " ," + cNombre );
                mResp.put( "success", true );
                mResp.put( "message", "No existe loteo-vendedor ID:" + pLoteo + " ," + cNombre );
            }
            rs.close();
            ps.close();
            return mResp;

        } catch (SQLException e) {
            traza.add( "Loteo.getByFiltro->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al leer tLoteo:" + pLoteo, e );
        }
    }
}
