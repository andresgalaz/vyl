package vyl.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import prg.glz.FrameworkException;
import prg.util.cnv.ConvertList;
import prg.util.cnv.ConvertMap;
import prg.util.db.hlp.ConexionHelper;
import util.JsonDataUtil;

/*
 * Denominar BSH:
 * vyl/bsh/db/lotetoClase.bsh
 * 
 * BSH de llamada para lista de loteos:
 * 
 * call.include('vyl/bsh/util/jsonDataUtilClase.bsh')
 * call.include('vyl/bsh/db/loteoClase.bsh')
 * // Opciones
 * // Listado de nombres de Loteo ( LOTEO_ID y LOTEO_NOMBRE )
 * new Loteo(request, connectionHelper).nombres();
 * // Obtener por ID o Nombre : prm_pLoteo y/o prm_cNombre, parámetro
 * // adicional prm_alias que se pega como prefijo a los nombres de los campos
 * // de salida. 
 * new Loteo(request, connectionHelper).get();
 * 
 * @author agalaz
 *
 */
public class Loteo {
    private HttpServletRequest request;
    private ConexionHelper     cnxHlp;
    // Solo como alias para acortar la sintaxis
    private JsonDataUtil       u = new JsonDataUtil();
    
    public Loteo(HttpServletRequest request, ConexionHelper connectionHelper) throws FrameworkException {
        this.request = request;
        this.cnxHlp = connectionHelper;
        // this.db = this.cnxHlp.getDataDb();
    }

    public Loteo(ConexionHelper connectionHelper) throws FrameworkException {
        this.cnxHlp = connectionHelper;
        // this.db = this.cnxHlp.getDataDb();
    }
    
    /**
     * Lista todas las loteos. No espera parámetros
     * 
     * @return
     * @throws FrameworkException
     */
    public List nombres() throws FrameworkException {
        try {
            String cSql = "SELECT  \n"
                    + "       lo.pLoteo          as LOTEO_ID, \n"
                    + "       lo.cNombre         as LOTEO_NOMBRE \n"
                    + " FROM  tLoteo lo \n ";
            PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
            ResultSet rs = ps.executeQuery();
            List lis = ConvertList.fromResultSet( rs );
            rs.close();
            ps.close();
            return lis;
        } catch (SQLException e) {
            throw new FrameworkException( "Al listar tLoteo", e );

        }
    }

    /**
     * Lee la loteo por ID
     * 
     * @return
     * @throws FrameworkException
     */
    public Map get() throws FrameworkException {
        // El parámetro se puede recibir:
        // - Request : prm_alias
        // - Request : prm_pLoteo
        // - Formdata : VYL_LOTEO_ID
        String cAlias = u.getString( this.request, "prm_alias" );
        Integer pLoteo = u.getInt( this.request, "prm_pLoteo" );
        String cNombre = u.getString( this.request, "prm_cNombre" );
        return getByFiltro( pLoteo, cNombre, cAlias );
    }

    private Map getByFiltro(Integer pLoteo, String cNombre, String cAlias) throws FrameworkException {
        if (cAlias == null)
            cAlias = "";
        else
            cAlias += "_";

        try {
            Map mResp;
            String cSql = "SELECT  \n"
                    + "       lo.pLoteo          as " + cAlias + "LOTEO_ID, \n"
                    + "       lo.cNombre         as " + cAlias + "LOTEO_NOMBRE, \n"
                    + "       lo.cDescripcion    as " + cAlias + "LOTEO_DESCRIPCION, \n"
                    + "       lo.cDeslinde       as " + cAlias + "LOTEO_DESLINDE \n"
                    + " FROM  tLoteo lo \n "
                    + " WHERE 1 = 1 \n"
                    + (pLoteo  != null ? " AND lo.pLoteo  = ? " : "" )
                    + (cNombre != null ? " AND lo.cNombre = ? " : "" )
                    ;
            PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
            int nIdx = 1;
            ps.setInt( nIdx++, pLoteo );
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                mResp = ConvertMap.fromResultSet( rs );
            } else {
                mResp = new HashMap();
                mResp.put( "success", true );
                mResp.put( "message", "No existe loteo-vendedor ID:" + pLoteo );
            }
            rs.close();
            ps.close();
            return mResp;

        } catch (SQLException e) {
            throw new FrameworkException( "Al leer tLoteo:" + pLoteo, e );
        }
    }
}
