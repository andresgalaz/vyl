package vyl.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import prg.glz.FrameworkException;
import prg.util.cnv.ConvertException;
import prg.util.cnv.ConvertMap;
import prg.util.cnv.ConvertNumber;
import prg.util.cnv.ConvertString;
import prg.util.db.hlp.ConexionHelper;
import util.JsonDataUtil;
import util.Rut;

/*
 * Denominar BSH:
 * vyl/bsh/db/compradorClase.bsh
 * 
 * BSH de llamada para actualizar:
 * 
 * call.include('vyl/bsh/util/Rut.bsh')
 * call.include('vyl/bsh/util/jsonDataUtilClase.bsh')
 * new Comprador(request, connectionHelper).insUpd();
 * 
 * @author agalaz
 *
 */
public class Comprador {
    private HttpServletRequest request;
    private ConexionHelper     cnxHlp;
    // Solo como alias para acortar la sintaxis
    private JsonDataUtil       u = new JsonDataUtil();
    // private AbstractDataDB db;

    public Comprador(ConexionHelper connectionHelper) throws FrameworkException {
        this.cnxHlp = connectionHelper;
        // this.db = this.cnxHlp.getDataDb();
    }

    public Comprador(HttpServletRequest request, ConexionHelper connectionHelper) throws FrameworkException {
        this.request = request;
        this.cnxHlp = connectionHelper;
        // this.db = this.cnxHlp.getDataDb();
    }

    /**
     * Para ser utilizado directamente desde el Front-End
     * 
     * @return
     * @throws FrameworkException
     */
    public String insUpd() throws FrameworkException {
        return insUpd( ConvertMap.fromRequest( request ), null );
    }

    /**
     * Inserta o Actualiza los datos del Comprador
     * 
     * @param frmData
     * @param cAlias
     * @return
     * @throws FrameworkException
     */
    public String insUpd(Map frmData, String cAlias) throws FrameworkException {
        if (ConvertString.isEmpty( cAlias ))
            cAlias = "";
        else
            cAlias += "_";
        Integer pComprador = u.getInt( frmData, cAlias + "COMPRADOR_ID" );
        String cNombre = u.getString( frmData, cAlias + "COMPRADOR_NOMBRE" );
        String cTelefono = u.getString( frmData, cAlias + "COMPRADOR_TELEFONO" );
        String cNacionalidad = u.getString( frmData, cAlias + "COMPRADOR_NACIONALIDAD" );
        String cEmail = u.getString( frmData, cAlias + "COMPRADOR_EMAIL" );
        String cProfesion = u.getString( frmData, cAlias + "COMPRADOR_PROFESION" );
        String cEstadoCivil = u.getString( frmData, cAlias + "COMPRADOR_ESTADO_CIVIL" );
        String cDireccion = null;
        try {
            Map mDireccion = (Map) frmData.get( cAlias + "COMPRADOR_DOMICILIO" );
            if (mDireccion != null)
                cDireccion = u.getString( mDireccion, "direccion" );
        } catch (Exception e) {
            cDireccion = u.getString( frmData, cAlias + "COMPRADOR_DOMICILIO" );
        }
        if (cDireccion != null && cDireccion.length() > 80)
            cDireccion = cDireccion.substring( 0, 80 );

        String cRut = u.getString( frmData, cAlias + "COMPRADOR_RUT" );
        if (!Rut.valida( cRut ))
            throw new FrameworkException( "Rut del comprador no es válido" + cRut );
        cRut = Rut.limpia( cRut );

        Map mRegAct = null;
        if (ConvertNumber.isCero( pComprador )) {
            pComprador = null;
            // Si no hay ID se busca por RUT
            mRegAct = getByFilter( null, cRut, null );
            // No existe el rut de comprador
            if (mRegAct.containsKey( "COMPRADOR_ID" ))
                pComprador = u.getInt( mRegAct, "COMPRADOR_ID" );
            else
                mRegAct = null;
        } else {
            mRegAct = getByFilter( pComprador, null, null );
            // Existe el comprador por ID
            if (!mRegAct.containsKey( "COMPRADOR_ID" ))
                mRegAct = null;
        }
        String cSql;
        if (mRegAct == null) {
            // Inserta
            cSql = "INSERT INTO tComprador (\n"
                    + "     cNombre , cRut       , cTelefono  , cNacionalidad , \n"
                    + "     cEmail  , cProfesion , cDireccion , cEstadoCivil \n"
                    + " ) VALUES (\n"
                    + "     ?, ?, ?, ?, \n"
                    + "     ?, ?, ?, ? \n"
                    + ")\n";
        } else {
            // Actualiza

            cSql = "UPDATE tComprador \n"
                    + " SET cNombre  = ?, cRut       = ?, cTelefono  = ?, cNacionalidad = ?, \n"
                    + "     cEmail   = ?, cProfesion = ?, cDireccion = ?, cEstadoCivil  = ? \n"
                    + " WHERE pComprador = ? \n";
        }
        try {
            PreparedStatement psUpd = this.cnxHlp.getConnection().prepareStatement( cSql, Statement.RETURN_GENERATED_KEYS );
            int nIdx = 1;
            cnxHlp.setString( psUpd, nIdx++, cNombre );
            cnxHlp.setString( psUpd, nIdx++, cRut );
            cnxHlp.setString( psUpd, nIdx++, cTelefono );
            cnxHlp.setString( psUpd, nIdx++, cNacionalidad );
            cnxHlp.setString( psUpd, nIdx++, cEmail );
            cnxHlp.setString( psUpd, nIdx++, cProfesion );
            cnxHlp.setString( psUpd, nIdx++, cDireccion );
            cnxHlp.setString( psUpd, nIdx++, cEstadoCivil );
            if (mRegAct != null)
                psUpd.setInt( nIdx++, pComprador );
            psUpd.execute();

            if (mRegAct == null) {
                // Obtiene la llave generada en caso de ser un insert
                ResultSet rs = psUpd.getGeneratedKeys();
                if (rs.next())
                    pComprador = rs.getInt( 1 );
                rs.close();
            }
            psUpd.close();
        } catch (SQLException e) {
            throw new FrameworkException( "Al insertar en la tabla tVenta\n" + ConvertException.stackTrace2string( e ) );
        }
        return pComprador.toString();
    }

    /**
     * Lee al comprador
     * 
     * @return
     * @throws FrameworkException
     */
    public Map get() throws FrameworkException {
        // El parámetro se puede recibir:
        // - Request : prm_alias
        // - Request : prm_cRut
        // - Request : prm_pComprador
        String cAlias = u.getString( this.request, "prm_alias" );
        String cRut = u.getString( this.request, "prm_cRut" );
        Integer pComprador = u.getInt( this.request, "prm_pComprador" );
        return getByFilter( pComprador, cRut, cAlias );
    }

    public Map getByFilter(Integer pComprador, String cRut, String cAlias) throws FrameworkException {
        if (ConvertNumber.isCero( pComprador ))
            pComprador = null;
        if (ConvertString.isEmpty( cRut ))
            cRut = null;

        // Ajusta el nombre del Alias de los campos
        if (cAlias == null)
            cAlias = "";
        else
            cAlias += "_";

        String cSql = "SELECT  \n"
                + "       cm.pComprador     as " + cAlias + "COMPRADOR_ID, \n"
                + "       cm.cNombre        as " + cAlias + "COMPRADOR_NOMBRE , \n"
                + "       cm.cRut           as " + cAlias + "COMPRADOR_RUT, \n"
                + "       cm.cTelefono      as " + cAlias + "COMPRADOR_TELEFONO, \n"
                + "       cm.cNacionalidad  as " + cAlias + "COMPRADOR_NACIONALIDAD, \n"
                + "       cm.cEmail         as " + cAlias + "COMPRADOR_EMAIL, \n"
                + "       cm.cProfesion     as " + cAlias + "COMPRADOR_PROFESION, \n"
                + "       cm.cDireccion     as " + cAlias + "COMPRADOR_DIRECCION, \n"
                + "       cm.cEstadoCivil   as " + cAlias + "COMPRADOR_ESTADO_CIVIL \n"
                + " FROM  tComprador cm \n "
                + " WHERE 1 = 1 \n"
                + (pComprador != null ? " AND cm.pComprador = ? " : "")
                + (cRut != null ? " AND cm.cRut = ? " : "");

        String msgWhere = (pComprador != null ? ", ID=" + pComprador : "")
                + (cRut != null ? ", RUT=" + cRut : "");
        try {
            Map mResp;
            PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
            int nIdx = 1;
            if (pComprador != null)
                ps.setInt( nIdx++, pComprador );
            if (cRut != null)
                ps.setString( nIdx++, cRut );
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                mResp = ConvertMap.fromResultSet( rs );
                Rut.formateaMap( mResp, cAlias + "COMPRADOR_RUT" );
            } else {
                mResp = new HashMap();
                mResp.put( "success", true );
                mResp.put( "message", "No existe comprador" + msgWhere );
            }
            rs.close();
            ps.close();
            return mResp;

        } catch (SQLException e) {
            throw new FrameworkException( "Al leer tComprador" + msgWhere + "\n" + ConvertException.stackTrace2string( e ), e );
        }
    }
}
