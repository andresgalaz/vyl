package vyl.db;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import prg.glz.FrameworkException;
import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertException;
import prg.util.cnv.ConvertList;
import prg.util.cnv.ConvertMap;
import prg.util.cnv.ConvertNumber;
import prg.util.cnv.ConvertString;
import prg.util.db.AbstractDataDB;
import prg.util.db.hlp.ConexionHelper;

/*
 * Denominar BSH:
 * vyl/bsh/db/leasingClase.bsh
 * 
 * BSH de llamada para lista de leasings:
 * 
 * call.include('vyl/bsh/db/leasingClase.bsh')
 * // Opciones
 * // Listado de cuatos por ID de la Venta ( LEASING_VENTA_ID  )
 * new Leasing(request, connectionHelper, traza).lista();
 * // Obtener por ID o Nombre : prm_pCuota y/o prm_cNombre, parámetro
 * // adicional prm_alias que se pega como prefijo a los nombres de los campos
 * // de salida. 
 * new Leasing(request, connectionHelper).get();
 * 
 * @author agalaz
 *
 */
public class Leasing {
    private HttpServletRequest request;
    private ConexionHelper     cnxHlp;
    private List               traza;
    // Solo como alias para acortar la sintaxis
    private JsonDataUtil       u = new JsonDataUtil();
    private AbstractDataDB     db;

    public Leasing(HttpServletRequest request, ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.request = request;
        this.cnxHlp = connectionHelper;
        this.traza = traza;
        this.db = this.cnxHlp.getDataDb();
    }

    public Leasing(ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.cnxHlp = connectionHelper;
        this.traza = traza;
        this.db = this.cnxHlp.getDataDb();
    }

    /**
     * Actualiza leasings
     * 
     * @return
     * @throws FrameworkException 
     */
    public String insUpd() throws FrameworkException {
        String cJsonData = request.getParameter( "prm_data" );
        if (ConvertString.isEmpty( cJsonData ))
            throw new FrameworkException( "Falta parámetro prm_data" );

        Map mData = ConvertMap.fromJsonString( cJsonData );
        return insUpd( mData );
    }

    /**
     * Genera los registros de cuotas del leasing, recibe los
     * siguientes parámetros en el request:
     * 
     * prm_pVenta : ID de la venta
     * prm_nCuotas : entero positivo obligatorio
     * prm_nMonto : decimal positivo obligatorio
     * prm_dInicio : fecha de la 1ra cuota obligatoria
     * 
     * @throws FrameworkException
     */
    public String generaCuotas() throws FrameworkException {
        Integer pVenta = u.getInt( request, "prm_pVenta", 0 );
        Integer nCuotas = u.getInt( request, "prm_nCuotas", 0 );
        Double nMonto = u.getDouble( request, "prm_nMonto" );
        Date dInicio = u.getDate( request, "prm_dInicio" );
        if (pVenta <= 0)
            throw new FrameworkException( "Falta parámetro prm_pVenta" );
        if (nCuotas <= 0)
            throw new FrameworkException( "Falta parámetro prm_nCuotas debe ser entero positivo" );
        if (nMonto == null || nMonto <= 0)
            throw new FrameworkException( "Falta parámetro prm_nMonto debe ser decimal positivo" );
        if (dInicio == null)
            throw new FrameworkException( "Falta parámetro prm_dInicio" );
        if (nCuotas > 120)
            throw new FrameworkException( "Parámetro prm_nCuotas excede el plazo máximo de financiamiento" );

        return generaCuotas( pVenta, nCuotas, nMonto, dInicio );
    }

    /*
    public String procesaPagos() throws FrameworkException {
        String cIdArchivo = u.getString( request, "prm_idArchivo" );
        if (ConvertString.isEmpty( cIdArchivo ))
            throw new FrameworkException( "Falta parámetro prm_idArchivo" );
        File fPagos = new File(cIdArchivo);
        if (! fPagos.exists() || ! fPagos.isFile() || ! fPagos.canRead())
            throw new FrameworkException( "No se puede acceder al archivo " + cIdArchivo );
        
        String SEPARATOR=";";
        String QUOTE="\"";
        
        BufferedReader br = null;
        try {
           
           br =new BufferedReader(new FileReader(fPagos));
           String line = br.readLine();
           while (null!=line) {
              String [] fields = line.split(SEPARATOR);
              System.out.println(Arrays.toString(fields));
              
              fields = removeTrailingQuotes(fields);
              System.out.println(Arrays.toString(fields));
              
              line = br.readLine();
           }
           
        } catch (Exception e) {
           ...
        } finally {
           if (null!=br) {
              br.close();
           }
        }
    }
    */
    
    public boolean hayCuotasGeneradas(Integer pVenta) throws FrameworkException {
        if (ConvertNumber.isCero( pVenta ))
            throw new FrameworkException( "pVenta debe ser mayor a cero" );
        String cWhere = null;
        if (db.isMysql())
            cWhere = " limit 1 ";
        Map mReg = getByFiltro( pVenta, null, null, cWhere );
        // Verifica si existe ID
        traza.add( "Leasing.hayCuotasGeneradas->" + ConvertMap.toString( mReg ) );
        return mReg.containsKey( "LEASING_CUOTA_ID" );

    }

    public String generaCuotas(Integer pVenta, Integer nCuotas, Double nMonto, Date dInicio) throws FrameworkException {
        Map mResp = new HashMap();
        traza.add( "Leasing.generaCuotas->(pVenta, nCuotas, nMonto, dInicio):(" + pVenta + ", " + nCuotas + ", " + nMonto + ", " + dInicio + ")" );
        
        if(ConvertNumber.isCero( nCuotas )) 
            return "No se indicó cantidad de cuotas";

        if(dInicio == null) 
            return "No se indicó fechas de inicio";

            

        String cSql = "INSERT INTO tLeasing ( nMonto, dVencimiento, pVenta, pCuota ) \n"
                + " VALUES ( ?, ?, ?, ? )";
        PreparedStatement psUpd = null;
        try {
            Calendar dCount = Calendar.getInstance();
            psUpd = this.cnxHlp.getConnection().prepareStatement( cSql );
            for (int i = 0; i < nCuotas; i++) {
                int nIdx = 1;
                dCount.setTime( dInicio );
                dCount.add( Calendar.MONTH, i );
                psUpd.setDouble( nIdx++, nMonto );
                psUpd.setDate( nIdx++, new java.sql.Date( dCount.getTimeInMillis() ) );
                psUpd.setInt( nIdx++, pVenta );
                psUpd.setInt( nIdx++, i + 1 );
                psUpd.execute();
                traza.add( "Leasing.generaCuotas->Cuota generada Nº " + (i + 1) );
            }
            psUpd.close();
        } catch (SQLException e) {
            db.close( psUpd );
            traza.add( "Leasing.generaCuotas->SQLException=" + e.getMessage() );
            throw new FrameworkException( "Al generar cuotas del leasing\n" + ConvertException.stackTrace2string( e ) );
        }
        return "Se generaron " + nCuotas + " cuotas";
    }

    private String insUpd(Map mData) throws FrameworkException {
        Integer pVenta = u.getInt( mData, "LEASING_VENTA_ID" );
        Integer pCuota = u.getInt( mData, "LEASING_CUOTA_ID" );
        Double nMonto = u.getDouble( mData, "LEASING_MONTO" );
        Date dVencimineto = u.getDate( mData, "LEASING_VENCIMIENTO" );
        Date dPago = u.getDate( mData, "LEASING_FECHA_PAGO" );

        if (ConvertNumber.isCero( pVenta )) {
            traza.add( "Leasing.insUpd->message:Las cuotas no pueden tener pVenta en cero" );
            throw new FrameworkException( "Las cuotas no pueden tener pVenta en cero" );
        }

        boolean bExiste = false;
        if (ConvertNumber.isCero( pCuota )) {
            pCuota = null;
            // Si no hay ID se busca por Nombre
            Map mReg = getByFiltro( pVenta, null, null, null );
            // Verifica si existe ID
            if (mReg.containsKey( "LEASING_CUOTA_ID" ))
                pCuota = u.getInt( mReg, "LEASING_CUOTA_ID" );
        } else {
            Map mReg = getByFiltro( pVenta, pCuota, null, null );
            // Existe registro
            if (mReg.containsKey( "LEASING_CUOTA_ID" ))
                bExiste = true;
        }

        String cSql;
        if (bExiste) {
            // Actualiza
            cSql = "UPDATE tLeasing \n"
                    + " SET nMonto = ?, dVencimiento = ?, dPago = ? \n"
                    + " WHERE pVenta = ? AND pCuota = ? \n";
        } else {
            // Trae último
            String cWhere = " ORDER BY pCuota DESC ";
            if (db.isMysql())
                cWhere += " limit 1 ";
            Map mCuotaMax = getByFiltro( pCuota, null, null, cWhere );
            pCuota = u.getInt( mCuotaMax, "LEASING_CUOTA_ID", 0 ) + 1;
            // Inserta
            cSql = "INSERT INTO tLeasing ( nMonto, dVencimiento, dPago, pVenta, pCuota ) \n"
                    + " VALUES ( ?, ?, ?, ?, ? )";
        }
        try {
            traza.add( "Leasing.insUpd->cSql:" + cSql );

            PreparedStatement psUpd = this.cnxHlp.getConnection().prepareStatement( cSql );
            int nIdx = 1;
            cnxHlp.setDouble( psUpd, nIdx++, nMonto );
            cnxHlp.setDate( psUpd, nIdx++, dVencimineto );
            cnxHlp.setDate( psUpd, nIdx++, dPago );
            psUpd.setInt( nIdx++, pVenta );
            psUpd.setInt( nIdx++, pCuota );
            psUpd.execute();
            psUpd.close();
        } catch (SQLException e) {
            traza.add( "Leasing.insUpd->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al insertar en la tabla tLeasing\n" + ConvertException.stackTrace2string( e ) );
        }
        return pCuota.toString();
    }

    /**
     * Lista todas las leasings. No espera parámetros
     * 
     * @return
     * @throws FrameworkException
     */
    public List lista() throws FrameworkException {
        // El parámetro se puede recibir:
        // - Request : prm_alias
        // - Request : prm_pVenta
        // - Request : prm_estado : ['PAGADA','PENDIENTE','ATRASADA']
        String cAlias = u.getString( this.request, "prm_alias" );
        Integer pVenta = u.getInt( this.request, "prm_pVenta" );
        String cEstado = u.getString( this.request, "prm_estado" );
        String cWhere = null;
        if ("PAGADA".equalsIgnoreCase( cEstado ))
            cWhere = " AND dPago IS NOT NULL ";
        else if ("PENDIENTE".equalsIgnoreCase( cEstado ))
            cWhere = " AND dPago IS NULL ";
        else if ("ATRASADA".equalsIgnoreCase( cEstado ))
            cWhere = " AND dPago IS NULL AND dVencimiento < " + db.getDateFunction();

        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = buildPreparedStatement( pVenta, null, cAlias, cWhere );
            rs = ps.executeQuery();
            List lResp = ConvertList.fromResultSet( rs );
            rs.close();
            ps.close();
            return lResp;

        } catch (SQLException e) {
            db.addToClose( rs );
            db.addToClose( ps );
            traza.add( "Leasing.getByFiltro->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al leer tLeasing->( prm_alias, pVenta, prm_estado )=(" + cAlias + ", " + pVenta + ", " + cEstado + ")" );
        }
    }

    /**
     * Lee la leasing por ID
     * 
     * @return
     * @throws FrameworkException
     */
    public Map get() throws FrameworkException {
        // El parámetro se puede recibir:
        // - Request : prm_alias
        // - Request : prm_pVenta
        // - Request : prm_pCuota
        // - Request : prm_estado : ['PAGADA','PENDIENTE','ATRASADA']
        String cAlias = u.getString( this.request, "prm_alias" );
        Integer pVenta = u.getInt( this.request, "prm_pVenta" );
        Integer pCuota = u.getInt( this.request, "prm_pCuota" );
        String cEstado = u.getString( this.request, "prm_estado" );
        String cWhere = null;
        if ("PAGADA".equalsIgnoreCase( cEstado ))
            cWhere = " AND dPago IS NOT NULL ";
        else if ("PENDIENTE".equalsIgnoreCase( cEstado ))
            cWhere = " AND dPago IS NULL ";
        else if ("ATRASADA".equalsIgnoreCase( cEstado ))
            cWhere = " AND dPago IS NULL AND dVencimiento < " + db.getDateFunction();

        return getByFiltro( pVenta, pCuota, cAlias, cWhere );
    }

    private Map getByFiltro(Integer pVenta, Integer pCuota, String cAlias, String cSqlAdd) throws FrameworkException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            Map mResp;
            ps = buildPreparedStatement( pVenta, pCuota, cAlias, cSqlAdd );
            rs = ps.executeQuery();
            if (rs.next()) {
                mResp = ConvertMap.fromResultSet( rs );
            } else {
                mResp = new HashMap();
                String cMsg;
                traza.add( cMsg = "No existe cuota (ID,Nº): (" + pVenta + "," + pCuota + ")" );
                mResp.put( "success", false );
                mResp.put( "message", cMsg );
            }
            rs.close();
            ps.close();
            return mResp;

        } catch (SQLException e) {
            db.addToClose( rs );
            db.addToClose( ps );
            traza.add( "Leasing.getByFiltro->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "Al leer tLeasing->( pVenta, pCuota, cAlias, cSqlAdd )=(" + pVenta + ", " + pCuota + ", " + cAlias + ", " + cSqlAdd + ")" );
        }
    }

    private PreparedStatement buildPreparedStatement(Integer pVenta, Integer pCuota, String cAlias, String cSqlAdd) throws FrameworkException {
        if (cAlias == null)
            cAlias = "";
        else
            cAlias += "_";
        if (cSqlAdd == null)
            cSqlAdd = "";

        try {
            String cSql = "SELECT  \n"
                    + "       pVenta          as " + cAlias + "LEASING_VENTA_ID, \n"
                    + "       pCuota          as " + cAlias + "LEASING_CUOTA_ID, \n"
                    + "       nMonto          as " + cAlias + "LEASING_MONTO, \n"
                    + "       dVencimiento    as " + cAlias + "LEASING_VENCIMIENTO, \n"
                    + "       dPago           as " + cAlias + "LEASING_FECHA_PAGO \n"
                    + " FROM  tLeasing \n "
                    + " WHERE 1 = 1 \n"
                    + (pVenta != null ? " AND pVenta  = ? " : "")
                    + (pCuota != null ? " AND pCuota  = ? " : "")
                    + cSqlAdd;
            traza.add( "Leasing.getByFiltro->cSql\n" + cSql );
            PreparedStatement ps = this.cnxHlp.getConnection().prepareStatement( cSql );
            int nIdx = 1;
            if (pVenta != null) {
                traza.add( "Leasing.buildPreparedStatement->pVenta:" + pVenta );
                ps.setInt( nIdx++, pVenta );
            }
            if (pCuota != null) {
                traza.add( "Leasing.buildPreparedStatement->pCuota:" + pCuota );
                ps.setInt( nIdx++, pCuota );
            }
            return ps;

        } catch (SQLException e) {
            traza.add( "Leasing.buildPreparedStatement->SQLException->message=" + e.getMessage() );
            throw new FrameworkException( "buildPreparedStatement tLeasing:", e );
        }
    }

}
