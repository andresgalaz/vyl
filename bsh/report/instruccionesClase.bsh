package vyl.report;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

import prg.glz.FrameworkException;
import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertNumber;
import prg.util.cnv.ConvertRut;
import prg.util.cnv.ConvertString;
import prg.util.db.hlp.ConexionHelper;
import util.ReportUtil;
import vyl.db.Loteo;
import vyl.db.Venta;

/**
 * Denominar BSH:
 * vyl/bsh/print/formularioClase.bsh
 * 
 * BSH de llamada:
 * 
 * call.include('vyl/bsh/print/formularioClase.bsh')
 * new Formulario(request, response, connectionHelper).solicitudCambio();
 *
 * Este BSH es para ser invocado via un HREF
 *
 * Bibliotecas utilizadas:
 * - batik-all-1.9.jar
 * - fop-transcoder-allinone-2.2.jar
 * - xml-apis-ext-1.3.04.jar
 * - xmlgraphics-commons-2.2.jar
 * 
 * @author agalaz
 *
 */
public class Instrucciones {
    private HttpServletRequest  request;
    private HttpServletResponse response;
    private ConexionHelper      cnxHlp;
    private List                traza;
    // Solo una abreviación
    private JsonDataUtil        u  = new JsonDataUtil();
    private ReportUtil          ru = new ReportUtil();

    /**
     * Para usar de AJAX Request
     * 
     * @param request
     * @param connectionHelper
     * @param traza
     * @throws FrameworkException
     */
    public Instrucciones(HttpServletRequest request, HttpServletResponse response, ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.request = request;
        this.response = response;
        this.cnxHlp = connectionHelper;
        this.traza = traza;
    }

    public void genera() throws FrameworkException {
        Locale.setDefault( new Locale( "es", "CL" ) );
        traza.add( "genera(): inicio" );
        Integer pVenta = u.getInt( request, "prm_pVenta", 0 );
        if (ConvertNumber.isCero( pVenta )) {
            String cMsg = "No está prm_pVenta en request";
            traza.add( "Instrucciones.genera:" + cMsg );
            throw new FrameworkException( cMsg );
        }
        // Completa MAP con los datos de la venta
        Map mData = new Venta( this.cnxHlp, this.traza ).getById( pVenta, 0 );

        // Fecha hoy extendida
        {
            String cFecha = null;
            Calendar cal = Calendar.getInstance();
            String cMes = new SimpleDateFormat( "MMMM" ).format( cal.getTime() );
            String cDia = null;
            int nDia = cal.get( Calendar.DAY_OF_MONTH );
            if (nDia == 1)
                cDia = "primero ";
            else
                cDia = String.valueOf( nDia );
            cFecha = cDia + " de " + cMes + " de " + cal.get( Calendar.YEAR );
            mData.put( "cFecha", cFecha );
        }

        String cComprador = null;
        {
            // Nombre comprador
            boolean bMasculino = "masculino".equalsIgnoreCase( (String) mData.get( "VYL_COMPRADOR_SEXO" ) );
            cComprador = (bMasculino ? "don" : "doña");
            String c = (String) mData.get( "VYL_COMPRADOR_NOMBRE" );
            if (ConvertString.isEmpty( c ))
                c = "DESCONOCIDO";
            cComprador += " " + c.toUpperCase();
            mData.put( "cCompradorNombre", c.toUpperCase() );
            // Nacionalidad
            c = (String) mData.get( "VYL_COMPRADOR_NACIONALIDAD" );
            if (ConvertString.isEmpty( c ))
                c = (bMasculino ? "chileno" : "chilena");
            cComprador += ", " + c;

            // Profesión
            c = (String) mData.get( "VYL_COMPRADOR_PROFESION" );
            if (!ConvertString.isEmpty( c ))
                cComprador += ", " + c;

            // Estado civil
            c = (String) mData.get( "VYL_COMPRADOR_ESTADO_CIVIL" );
            if (!ConvertString.isEmpty( c ))
                cComprador += ", " + c;

            // cédula nacional de identidad número  16.838.258-8,  domiciliado en Rene Olivares Becerra N°3.091, comuna de Maipu, Región Metropolitana            
            // RUT
            cComprador += ", cedula nacional de identidad número " + ConvertRut.formatea( (String) mData.get( "VYL_COMPRADOR_RUT" ) );

            // Domicilio
            c = (String) mData.get( "VYL_COMPRADOR_DIRECCION" );
            if (!ConvertString.isEmpty( c ))
                cComprador += ", " + c;

        }
        mData.put( "cComprador", cComprador );

        // Predio
        {
            Integer pLoteo = ConvertNumber.toInteger( mData.get( "VYL_LOTEO" ) );
            Map mLote = new Loteo( this.cnxHlp, this.traza ).getByFiltro( pLoteo, null, null );
            traza.add( mLote );
            mData.putAll( mLote );
            traza.add( mData );

            String cLoteNumero = "parcela " + ConvertNumber.escrito( ConvertNumber.toDouble( mData.get( "VYL_PARCELA" ) ) );
            mData.put( "cLoteNumero", cLoteNumero.toUpperCase() );
        }

        // Saldo
        {
            Double nValor = u.getDouble( mData, "VYL_VALOR" );
            Double nReserva = u.getDouble( mData, "VYL_RESERVA" );
            String cSaldo = ru.fmtNumber( nValor - nReserva, "$" );

            mData.put( "cSaldo", cSaldo );
        }
        /*
        try {
            String dirTpl = "InstruccionesLakus.docx";
            File f = new File( dirTpl );
            FileInputStream fis = new FileInputStream( f );
            XWPFDocument xdoc = new XWPFDocument( OPCPackage.open( fis ) );
            for (XWPFParagraph p : xdoc.getParagraphs()) {
                replaceInParagraph( p, mData );
            }
            // Write the Document in file system
            FileOutputStream out = new FileOutputStream( new File( "Instrucciones_" + pVenta + ".docx" ) );
            xdoc.write( out );
            xdoc.close();
        
            out.close();
        } catch (InvalidFormatException | IOException e) {
            e.printStackTrace();
        }
        */
        try {
            String dirTpl = "vyl/resources/reporte/InstruccionesLakus.docx";
            dirTpl = request.getServletContext().getRealPath( dirTpl );
            traza.add( dirTpl );
            File f = new File( dirTpl );
            FileInputStream fis = new FileInputStream( f );
            XWPFDocument xdoc = new XWPFDocument( OPCPackage.open( fis ) );
            for (XWPFParagraph p : xdoc.getParagraphs()) {
                replaceInParagraph( p, mData );
            }

            String dirOut = "vyl/resources/reporte/Instrucciones_" + pVenta + ".docx";
            dirOut = request.getServletContext().getRealPath( dirOut );
            File fInOut = new File( dirOut );
            FileOutputStream out = new FileOutputStream( fInOut );
            xdoc.write( out );
            xdoc.close();
            out.close();

            response.setCharacterEncoding( "UTF-8" );
            response.setContentType( "Content-Type: application/msword" );
            response.setHeader( "Content-Disposition", "attachment;filename=Instrucciones_" + pVenta + ".docx" );
            response.setHeader( "Content-Transfer-Encoding", "binary" );
            response.setContentLength( (int) fInOut.length() );
            FileInputStream in = new FileInputStream( fInOut );
            IOUtils.copy( in, response.getOutputStream() );
            in.close();
            fInOut.delete();
            traza.add( "genera(): after write" );
            return;
        } catch (Exception e) {
            traza.add( "genera(): error message " + e.getMessage() );
            System.out.println( e.getMessage() );
            e.printStackTrace();
        }
    }

    /**
     * Replaces placeholders to replacement values in a given paragraph. Expected placeholder format is: ${MY_PLACEHOLDER_NAME}
     *
     * @param paragraph                  Paragraph with placeholders.
     * @param mData Collection of placeholder name keys and replacement values.
     */
    public static void replaceInParagraph(
            XWPFParagraph paragraph,
            Map mData) {

        final String PLACEHOLDER_PREFIX = "${";
        final String PLACEHOLDER_POSTFIX = "}";

        String text = paragraph.getText();

        if (!text.contains( PLACEHOLDER_PREFIX )) {
            return;
        }

        boolean isReplacementStarted = false;
        boolean isClosing;
        StringBuilder placeholderName = new StringBuilder();
        StringBuilder prePlaceholderText = new StringBuilder();
        StringBuilder postPlaceholderText = new StringBuilder();

        for (XWPFRun run : paragraph.getRuns()) {

            if (run.getText( 0 ) == null)
                continue;

            isClosing = run.getText( 0 ).contains( PLACEHOLDER_POSTFIX );

            if (!isReplacementStarted && run.getText( 0 ).contains( PLACEHOLDER_PREFIX )) {
                // Start replacements:
                String runText = run.getText( 0 );
                int prefixIndex = runText.indexOf( PLACEHOLDER_PREFIX );
                int postfixIndex = runText.indexOf( PLACEHOLDER_POSTFIX );

                String placeholderText = runText.substring(
                        prefixIndex >= 0 ? prefixIndex : 0,
                        postfixIndex >= 0 ? postfixIndex + 1 : runText.length() );

                placeholderName.append( placeholderText.replace( PLACEHOLDER_PREFIX, "" ) );
                prePlaceholderText.append( runText, 0, prefixIndex >= 0 ? prefixIndex : 0 );
                postPlaceholderText.append( runText.substring( postfixIndex > 0 ? postfixIndex + 1 : runText.length() ) );
                run.setText( "", 0 );
                isReplacementStarted = true;
            }

            if (isReplacementStarted) {
                // Accumulate placholder parts:
                String runText = run.getText( 0 );
                int prefixIndex = runText.indexOf( PLACEHOLDER_PREFIX );
                int postfixIndex = runText.indexOf( PLACEHOLDER_POSTFIX );

                String placeholderText = runText.substring(
                        prefixIndex >= 0 ? prefixIndex : 0,
                        postfixIndex >= 0 ? postfixIndex + 1 : runText.length() );

                if (isReplacementStarted && !isClosing)
                    placeholderText = runText;

                placeholderName.append( placeholderText.replace( PLACEHOLDER_POSTFIX, "" ) );
                prePlaceholderText.append( runText.substring( 0, prefixIndex >= 0 ? prefixIndex : 0 ) );
                postPlaceholderText.append( runText.substring( postfixIndex > 0 ? postfixIndex + 1 : runText.length() ) );
                run.setText( "", 0 );
            }

            if (isReplacementStarted && isClosing) {
                // Finilize replacements:
                String runText = run.getText( 0 );
                int prefixIndex = runText.indexOf( PLACEHOLDER_PREFIX );
                int postfixIndex = runText.indexOf( PLACEHOLDER_POSTFIX );
                String placeholderText = runText.substring(
                        prefixIndex >= 0 ? prefixIndex : 0,
                        postfixIndex >= 0 ? postfixIndex + 1 : runText.length() );
                placeholderName.append( placeholderText );

                prePlaceholderText.append( runText.substring( 0, prefixIndex >= 0 ? prefixIndex : 0 ) );
                postPlaceholderText.append( runText.substring( postfixIndex > 0 ? postfixIndex + 1 : runText.length() ) );
                placeholderName.append( run.getText( 0 ).replace( PLACEHOLDER_POSTFIX, "" ) );
                boolean endsWithPostfix = placeholderName.lastIndexOf( PLACEHOLDER_POSTFIX ) == placeholderName.length() - PLACEHOLDER_POSTFIX.length();

                if (endsWithPostfix) {
                    placeholderName.replace(
                            placeholderName.lastIndexOf( PLACEHOLDER_POSTFIX ),
                            placeholderName.length(),
                            "" );
                }

                String placeholderValue = "";
                for (Object placeholder : mData.keySet()) {
                    // Choose placeholder:
                    String placeholderCore = ((String) placeholder)
                            .replace( PLACEHOLDER_PREFIX, "" )
                            .replace( PLACEHOLDER_POSTFIX, "" );

                    placeholderValue = placeholderCore.equals( placeholderName.toString() ) ? (String) mData.get( placeholder ) : "";

                    if (!placeholderValue.isEmpty())
                        break;
                }

                run.setText( prePlaceholderText + placeholderValue + postPlaceholderText, 0 );

                isReplacementStarted = false;
                placeholderName = new StringBuilder();
                prePlaceholderText = new StringBuilder();
                postPlaceholderText = new StringBuilder();
            }
        }
    }
}
