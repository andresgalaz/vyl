package vyl.report;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

import prg.glz.FrameworkException;
import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertNumber;
import prg.util.cnv.ConvertRut;
import prg.util.cnv.ConvertString;
import prg.util.db.hlp.ConexionHelper;
import util.ReportUtil;
import vyl.db.Loteo;
import vyl.db.Venta;

/**
 * Denominar BSH:
 * vyl/bsh/print/formularioClase.bsh
 * 
 * BSH de llamada:
 * 
 * call.include('vyl/bsh/print/formularioClase.bsh')
 * new Formulario(request, response, connectionHelper).solicitudCambio();
 *
 * Este BSH es para ser invocado via un HREF
 *
 * Bibliotecas utilizadas:
 * - batik-all-1.9.jar
 * - fop-transcoder-allinone-2.2.jar
 * - xml-apis-ext-1.3.04.jar
 * - xmlgraphics-commons-2.2.jar
 * 
 * @author agalaz
 *
 */
public class Escritura {
    private HttpServletRequest  request;
    private HttpServletResponse response;
    private ConexionHelper      cnxHlp;
    private List                traza;
    // Solo una abreviación
    private JsonDataUtil        u  = new JsonDataUtil();
    private ReportUtil          ru = new ReportUtil();

    /**
     * Para usar de AJAX Request
     * 
     * @param request
     * @param connectionHelper
     * @param traza
     * @throws FrameworkException
     */
    public Escritura(HttpServletRequest request, HttpServletResponse response, ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.request = request;
        this.response = response;
        this.cnxHlp = connectionHelper;
        this.traza = traza;
    }

    public void genera() throws FrameworkException {
        Locale.setDefault( new Locale( "es", "CL" ) );
        traza.add( "genera(): inicio" );
        Integer pVenta = u.getInt( request, "prm_pVenta", 0 );
        if (ConvertNumber.isCero( pVenta )) {
            String cMsg = "No está prm_pVenta en request";
            traza.add( "Escritura.genera:" + cMsg );
            throw new FrameworkException( cMsg );
        }

        // Completa MAP con los datos de la venta
        Map mData = new Venta( this.cnxHlp, this.traza ).getById( pVenta, 0 );

        String cComprador = null;
        {
            // Nombre comprador
            boolean bMasculino = "masculino".equalsIgnoreCase( (String) mData.get( "VYL_COMPRADOR_SEXO" ) );
            cComprador = (bMasculino ? "don" : "doña");
            String c = (String) mData.get( "VYL_COMPRADOR_NOMBRE" );
            if (ConvertString.isEmpty( c ))
                c = "DESCONOCIDO";
            cComprador += " " + c.toUpperCase();
            mData.put( "cCompradorNombre", c.toUpperCase() );
            // Nacionalidad
            c = (String) mData.get( "VYL_COMPRADOR_NACIONALIDAD" );
            if (ConvertString.isEmpty( c ))
                c = (bMasculino ? "chileno" : "chilena");
            cComprador += ", " + c;

            // Profesión
            c = (String) mData.get( "VYL_COMPRADOR_PROFESION" );
            if (!ConvertString.isEmpty( c ))
                cComprador += ", " + c;

            // Estado civil
            c = (String) mData.get( "VYL_COMPRADOR_ESTADO_CIVIL" );
            if (!ConvertString.isEmpty( c ))
                cComprador += ", " + c;

            // RUT
            cComprador += ", cedula nacional de identidad número " + ConvertRut.escrito( (String) mData.get( "VYL_COMPRADOR_RUT" ) );

            // Domicilio
            c = (String) mData.get( "VYL_COMPRADOR_DIRECCION" );
            if (!ConvertString.isEmpty( c ))
                cComprador += ", " + c;

        }
        mData.put( "cComprador", cComprador );

        // Predio
        {
            Integer pLoteo = ConvertNumber.toInteger( mData.get( "VYL_LOTEO" ) );
            Map mLote = new Loteo( this.cnxHlp, this.traza ).getByFiltro( pLoteo, null, null );
            traza.add( mLote );
            mData.putAll( mLote );
            traza.add( mData );

            String cLoteNumero = ConvertNumber.escrito( ConvertNumber.toDouble( mData.get( "VYL_PARCELA" ) ) );
            mData.put( "cLoteNumero", cLoteNumero );
        }

        Double nValorPredio = u.getDouble( mData, "VYL_VALOR" );
        Double nReserva = u.getDouble( mData, "VYL_RESERVA" );
        Double nSaldo = nValorPredio - nReserva;

        mData.put( "cValorPredio", ConvertNumber.escrito( nValorPredio ) );
        mData.put( "cReserva", ConvertNumber.escrito( nReserva ) );
        mData.put( "cSaldo", ConvertNumber.escrito( nSaldo ) );
        /*
        try {
            String dirTpl = "EscrituraLakus.docx";
            File f = new File( dirTpl );
            FileInputStream fis = new FileInputStream( f );
            XWPFDocument xdoc = new XWPFDocument( OPCPackage.open( fis ) );
            for (XWPFParagraph p : xdoc.getParagraphs()) {
                replaceInParagraph( p, mData );
            }
            // Write the Document in file system
            FileOutputStream out = new FileOutputStream( new File( "Escritura_"+pVenta+".docx" ) );
            xdoc.write( out );
            xdoc.close();
        
            out.close();
        } catch (InvalidFormatException | IOException e) {
            e.printStackTrace();
        }
        */
        try {
            String dirTpl = "vyl/resources/reporte/EscrituraLakus.docx";
            dirTpl = request.getServletContext().getRealPath( dirTpl );
            traza.add( dirTpl );
            File f = new File( dirTpl );
            FileInputStream fis = new FileInputStream( f );
            XWPFDocument xdoc = new XWPFDocument( OPCPackage.open( fis ) );
            for (XWPFParagraph p : xdoc.getParagraphs()) {
                ru.replaceInParagraph( p, mData );
            }

            String dirOut = "vyl/resources/reporte/Escritura_" + pVenta + ".docx";
            dirOut = request.getServletContext().getRealPath( dirOut );
            File fInOut = new File( dirOut );
            FileOutputStream out = new FileOutputStream( fInOut );
            xdoc.write( out );
            xdoc.close();
            out.close();

            response.setCharacterEncoding( "UTF-8" );
            response.setContentType( "Content-Type: application/msword" );
            response.setHeader( "Content-Disposition", "attachment;filename=Escritura_" + pVenta + ".docx" );
            response.setHeader( "Content-Transfer-Encoding", "binary" );
            response.setContentLength( (int) fInOut.length() );
            FileInputStream in = new FileInputStream( fInOut );
            IOUtils.copy( in, response.getOutputStream() );
            in.close();
            fInOut.delete();
            traza.add( "genera(): after write" );
            return;
        } catch (Exception e) {
            traza.add( "genera(): error message " + e.getMessage() );
            System.out.println( e.getMessage() );
            e.printStackTrace();
        }
    }

}
