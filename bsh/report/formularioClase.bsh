package vyl.report;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import prg.glz.FrameworkException;
import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertException;
import prg.util.cnv.ConvertMap;
import prg.util.cnv.ConvertNumber;
import prg.util.cnv.ConvertTimestamp;
import prg.util.db.hlp.ConexionHelper;
import prg.util.rpt.MultiPageJasper;
import util.JasperUtil;
import vyl.db.Venta;

/**
 * Denominar BSH:
 * vyl/bsh/print/formularioClase.bsh
 * 
 * BSH de llamada:
 * 
 * call.include('vyl/bsh/print/formularioClase.bsh')
 * new Formulario(request, response, connectionHelper).solicitudCambio();
 *
 * Este BSH es para ser invocado via un HREF
 *
 * Bibliotecas utilizadas:
 * - batik-all-1.9.jar
 * - fop-transcoder-allinone-2.2.jar
 * - xml-apis-ext-1.3.04.jar
 * - xmlgraphics-commons-2.2.jar
 * 
 * @author agalaz
 *
 */
public class Formulario {
    private HttpServletRequest  request;
    private HttpServletResponse response;
    private ConexionHelper      cnxHlp;
    private List                traza;
    // Solo una abreviación
    private JsonDataUtil        u         = new JsonDataUtil();
    private JasperUtil          ju        = new JasperUtil();

    // Variables de PDF
    private String[]            paramsPdf = new String[] { "FECHAHORA_EMISION",
            "VYL_CAMPANA", "VYL_CBR", "VYL_COMPRADOR_DOMICILIO",
            "VYL_COMPRADOR_EMAIL", "VYL_COMPRADOR_ESTADO_CIVIL", "VYL_COMPRADOR_ID",
            "VYL_COMPRADOR_NACIONALIDAD", "VYL_COMPRADOR_NOMBRE", "VYL_COMPRADOR_PROFESION",
            "VYL_COMPRADOR_RUT", "VYL_COMPRADOR_TELEFONO", "VYL_EMPRESA_ID",
            "VYL_EMPRESA_NOMBRE", "VYL_EMPRESA_RUT", "VYL_EMPRESA_REPRESENTANTE",
            "VYL_EMPRESA_REPRESENTANTE_RUT", "VYL_EMPRESA_DIRECCION", "VYL_EMPRESA_ESTADO_CIVIL",
            "VYL_ESCRITURA", "VYL_ESCRITURA_NOTARIO", "VYL_FECHA_CIERRE",
            "VYL_FINANCIAMIENTO_CUOTAS", "VYL_FINANCIAMIENTO_GASTO_CONTRATO", "VYL_FINANCIAMIENTO_GASTO_NOTARIAL",
            "VYL_FINANCIAMIENTO_INTERESES", "VYL_FINANCIAMIENTO_PIE", "VYL_FINANCIAMIENTO_VTO",
            "VYL_ID", "VYL_INSTRUCCIONES_NOTARIO", "VYL_LOTEO",
            "VYL_MODALIDAD_OBSERVACIONES", "VYL_MODALIDAD_PAGO", "VYL_MODALIDAD_VENTA",
            "VYL_OBSERVACIONES_GASTOS", "VYL_OBSERVACIONES_CONTRATO", "VYL_OBSERVACIONES_VENDEDOR",
            "VYL_OBSERVACIONES_RESERVA", "VYL_OBSERVACIONES_CIERRE", "VYL_PARCELA",
            "VYL_RESERVA", "VYL_ROL", "VYL_VALOR" };

    /**
     * Para usar de AJAX Request
     * 
     * @param request
     * @param connectionHelper
     * @param traza
     * @throws FrameworkException
     */
    public Formulario(HttpServletRequest request, HttpServletResponse response, ConexionHelper connectionHelper, List traza) throws FrameworkException {
        this.request = request;
        this.response = response;
        this.cnxHlp = connectionHelper;
        this.traza = traza;
    }

    public void genera() throws FrameworkException {
        traza.add( "genera(): inicio" );
        Integer pVenta = u.getInt( request, "prm_pVenta", 0 );
        if (ConvertNumber.isCero( pVenta )) {
            String cMsg = "No está prm_pVenta en request";
            traza.add( "Formulario.genera:" + cMsg );
            throw new FrameworkException( cMsg );
        }
        String dirTpl = "vyl/resources/reporte";
        dirTpl = request.getServletContext().getRealPath( dirTpl );
        String cNombreBajada = "Formulario Resumen " + pVenta + ".pdf";
        traza.add( "Formulario.genera->dirTpl:" + dirTpl );

        // Completa MAP con los datos de la venta
        Map mData = new Venta( this.cnxHlp, this.traza ).getById( pVenta, 0 );
        boolean isLeasing = u.getBoolean( mData, "VYL_IS_LEASING" );
        if (isLeasing) {
            Double nValor = u.getDouble( mData, "VYL_VALOR" );
            Double nReserva = u.getDouble( mData, "VYL_RESERVA" );
            Double nPie = u.getDouble( mData, "VYL_FINANCIAMIENTO_PIE" );
            if (nValor != null || nPie != null) {
                if (nReserva == null)
                    nReserva = 0.0;
                mData.put( "VYL_FINANCIAMIENTO_MONTO", nValor - nPie - nReserva );
            }
            ju.fmtNumber( mData, "VYL_FINANCIAMIENTO_PIE", "$" );
            ju.fmtNumber( mData, "VYL_FINANCIAMIENTO_MONTO", "$" );
        }

        ju.fmtNumber( mData, "VYL_VALOR", "$" );
        ju.fmtNumber( mData, "VYL_RESERVA", "$" );
        ju.fmtNumber( mData, "VYL_ESCRITURA", "$" );
        ju.fmtNumber( mData, "VYL_INSTRUCCIONES_NOTARIO", "$" );
        ju.fmtNumber( mData, "VYL_ESCRITURA_NOTARIO", "$" );
        ju.fmtNumber( mData, "VYL_CBR", "$" );

        mData.put( "FECHAHORA_EMISION", ConvertTimestamp.toString( new Date() ) );
        try {
            Map mDireccion = (Map) mData.get( "VYL_COMPRADOR_DOMICILIO" );
            if (mDireccion != null) {
                String cDireccion = u.getString( mDireccion, "direccion" );
                mData.put( "VYL_COMPRADOR_DOMICILIO", cDireccion );
            }
        } catch (Exception e) {
        }
        // Genera PDF
        MultiPageJasper oMulti = new MultiPageJasper( dirTpl );
        ju.fixParameters( mData, paramsPdf );
        traza.add( "Formulario.genera->mData" + ConvertMap.toString( mData ) );

        try {
            String cJasperTpl = "formularioVentaCierre" + (isLeasing ? "Leasing" : "") + ".jrxml";
            oMulti.addJRxml( cJasperTpl, mData );
        } catch (Exception e) {
            traza.add( "ERROR:" + ConvertException.stackTrace2string( e ) );
        }
        oMulti.enviaReportPDF( response, cNombreBajada );
    }

}
