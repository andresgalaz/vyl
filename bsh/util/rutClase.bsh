package util;

import java.util.Map;

import prg.util.cnv.ConvertString;

/*
 * Denominar BSH: 
 * 
 * <systema>/bsh/util/rutClase.bsh
 * 
 * @author agalaz
 * 
 */
public class Rut {

    /**
     * Valida un rut de acuerdo a su dígito verificador.
     * 
     * @param cRut
     *            Rut a validar
     * @return true si el rut es válido, false en cualquier otro caso.
     */
    public static boolean valida(String cRut) {
        if (cRut == null)
            return true;

        int suma = 0;
        String cDvRut, cDvCalc;
        int[] serie = { 2, 3, 4, 5, 6, 7 };

        cRut = limpia( cRut );
        if (cRut.length() != 9)
            return false;

        cDvRut = cRut.substring( cRut.length() - 1 );
        for (int i = cRut.length() - 2; i >= 0; i--) {
            suma += Integer.valueOf( cRut.substring( i, i + 1 ) ) * serie[(cRut.length() - 2 - i) % 6];
        }
        cDvCalc = String.valueOf( 11 - suma % 11 );
        if (cDvCalc.compareTo( "10" ) == 0)
            cDvCalc = "K";

        if (cDvCalc.compareToIgnoreCase( cDvRut ) == 0)
            return true;

        return false;

    }

    /**
     * Le da formato a un rut, concatenándole puntos y guión.
     * 
     * @param cRut
     *            Rut a formatear.
     * @return Un nuevo String, con el rut formateado.
     */
    public static String formatea(String cRut) {
        int cont = 0;
        String cFormato;
        if (ConvertString.isEmpty( cRut )) {
            return "";
        } else {
            cRut = limpia( cRut );
            cFormato = "-" + cRut.substring( cRut.length() - 1 );
            for (int i = cRut.length() - 2; i >= 0; i--) {
                cFormato = cRut.substring( i, i + 1 ) + cFormato;
                cont++;
                if (cont == 3 && i != 0) {
                    cFormato = "." + cFormato;
                    cont = 0;
                }
            }
            return cFormato;
        }
    }

    public static String limpia(String cRut) {
        if (cRut == null)
            return null;
        cRut = cRut.replace( ".", "" ).replace( "-", "" ).toUpperCase();
        if (cRut.length() == 8)
            cRut = "0" + cRut;
        return cRut;
    }

    /**
     * Recupera el dato por llave, si existe lo formatea y lo vuelve a 
     * guardar en el MAP.
     * 
     * @param mData
     * @param cKey
     * @return
     */
    public static String formateaMap(Map mData, String cKey) {
        if (mData.containsKey( cKey )) {
            String cRut = formatea( (String) mData.get( cKey ) );
            mData.put( cKey, cRut );
            return cRut;
        }
        return null;
    }
}
