package util;

import java.text.NumberFormat;
import java.util.Locale;
import java.util.Map;

import prg.glz.wkf.util.JsonDataUtil;
import prg.util.cnv.ConvertObject;

/*
/*
 * Denominar BSH: 
 * 
 * <systema>/bsh/util/jasperUtilClase.bsh
 * 
 * @author agalaz
 *
 */
public class JasperUtil {
    private NumberFormat nf = NumberFormat.getInstance( new Locale( "es", "ES" ) );

    /**
     * Corrige el contenido de mData, convirtiendo todas los parametros incluidos
     * en ek array arrParams a STRING y NO Nulos.
     * 
     * @param mData
     * @param aParams
     * @return
     */
    public Map fixParameters(Map mData, String[] aParams) {
        for (int i = 0; i < aParams.length; i++) {
            Object v = mData.get( aParams[i] );
            if (v == null)
                mData.put( aParams[i], "" );
            else
                mData.put( aParams[i], ConvertObject.toString( v ) );
        }
        return mData;
    }

    /**
     * Da formato numÃ©rico a montos, con separador de miles y signo
     * @param mData
     * @param cKey
     * @param cSigno
     */
    public void fmtNumber(Map mData, String cKey, String cSigno) {
        if (mData.containsKey( cKey )) {
            Double v = JsonDataUtil.getDouble( mData, cKey );
            if (v != null) {
                if (cSigno == null)
                    mData.put( cKey, nf.format( v ) );
                else
                    mData.put( cKey, cSigno + " " + nf.format( v ) );

                return;
            }
        }
        mData.put( cKey, " " );
    }

}
